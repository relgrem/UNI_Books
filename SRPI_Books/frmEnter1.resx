<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAAAAABoBQAAJgAAACAgAAAAAAAAqAgAAI4FAAAoAAAAEAAAACAAAAABAAgAAAAAAEAB
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAABkYGAByeHsAaW9xAGlwcgB0dHMACgoKABoZGQD///8A/fz8AP39
        /AD6+voAcXl7AMrJyQCurq4AmJiYAK+vrwCko6MA0tLSAJKSkgCfn58A8PDwAGhvcQD7+/sA/v7+APT0
        9ADu7e0A9vr8AOXq6wD39vYA+Pf3AGhucADHx8YApqamAJ2dnQCIiIgAjY2NAJSTkgD3/v8AZ25wANzc
        2wCampoAoKCgAPP9/wBnbXAA9/f3ANHR0QDl5eUAxMTEANDQ0ADY2NgA09PSAPX3+gDP09QA39/fAL29
        vQDGx8cA2dfXALKysgDy8/MA2tXaAL/CwwBoX3IAZ25xAM7OzgCenp4Aurq6AKGhoQCloKQAIiU+AD5C
        aACWlr4AaGukACYmjABoZ2cA9fX1AOfn5wDMzMsALCVSAB4j/wB3ev8AyMvsAMDA/AA0P/4AFBeYAGho
        aADa2toAsLCwAK2trQDLysoA6/L2AP//+QAHB2kAZGv9ALvP+QDS0/8AXl7/AFGJ/QAHAAcA3NzcAIGB
        gQCGhIQA1tXVAHZqcgASAFkAR0fiAAIHzAACC7MAChPCACAr8AADA0MAaWlpAOHh4QC+vr4As7OzAMnJ
        yQDU1NQAppufAAA8GQD87v8AZljeAAEB3AAED90ABxHLACkDwAAKAAsA7+/vAC5CJQApEvoAcEjZAEcB
        yQAuQ/4AFSnhABcXFwD3/f8AGx1FAF8NzgDqhv8A52b9ACY54wAMCwsAZWVlAFxcXABdXV0AXl5eAGBZ
        XAAlExgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAACMjY6Ojo6PkJEHBwcHAACFCAgICAgICIYHiImKiwcAbwh+Ehkt
        dAgHgAiBgoOEB28IcHFyc3R1B3d4eXp7fAdVCGNkQWVmZwcIaWprbG0HVQhWV1hZWlsHXQheX2BhB0oI
        S0wLCE0IB09QUVJTVAc/CEBBQkMkDkQHRkdISQcALAg1Njc4OTo7PAcHBwcAACwILS4vMDEyFTM0CAcA
        AAAnCCgpKggICBgIKwgHAAAAHwggISIjDSQNJSYIBwAAABYIFxgZGhsIHB0eCAcAAAAMCA0ODxAREhMU
        FQgHAAAABwgJCAgICAoICAsIAAAAAAABAgMDAwMDAwQFBgAAAACAAwAAAAEAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAEAAAADAAAABwAAAAcAAAAHAAAABwAAAAcAAAAHAACADwAAKAAAACAAAABAAAAAAQAIAAAA
        AACABAAAAAAAAAAAAAAAAQAAAAAAAAAAAACAAIAAgAAAAICAAAAAgAAAAICAAAAAgADAwMAAwNzAAPDK
        pgCAgIAA/wD/AP8AAAD//wAAAP8AAAD//wAAAP8A////APD7/wCkoKAA1PD/ALHi/wCO1P8Aa8b/AEi4
        /wAlqv8AAKr/AACS3AAAerkAAGKWAABKcwAAMlAA1OP/ALHH/wCOq/8Aa4//AEhz/wAlV/8AAFX/AABJ
        3AAAPbkAADGWAAAlcwAAGVAA1NT/ALGx/wCOjv8Aa2v/AEhI/wAlJf8AAAD/AAAA3AAAALkAAACWAAAA
        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
</value>
  </data>
</root>